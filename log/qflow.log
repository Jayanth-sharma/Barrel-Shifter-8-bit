Starting new log file Sun Nov 20 10:29:10 2022

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Running yosys for verilog parsing and synthesis
yosys  -s barrel_shifter_8bit.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `barrel_shifter_8bit.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/jayanth/Desktop/vsdflow/barrel/source/barrelshift.v
Parsing Verilog input from `/home/jayanth/Desktop/vsdflow/barrel/source/barrelshift.v' to AST representation.
Generating RTLIL representation for module `\barrel_shifter_8bit'.
Generating RTLIL representation for module `\mux2X1'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \barrel_shifter_8bit
Used module:     \mux2X1

3.1.2. Analyzing design hierarchy..
Top module:  \barrel_shifter_8bit
Used module:     \mux2X1
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module mux2X1.
Optimizing module barrel_shifter_8bit.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux2X1..
Finding unused cells or wires in module \barrel_shifter_8bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module barrel_shifter_8bit..
checking module mux2X1..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \barrel_shifter_8bit..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mux2X1..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \barrel_shifter_8bit.
Optimizing cells in module \mux2X1.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module barrel_shifter_8bit:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2X1:
created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \barrel_shifter_8bit..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mux2X1..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \barrel_shifter_8bit.
Optimizing cells in module \mux2X1.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \barrel_shifter_8bit..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mux2X1..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \barrel_shifter_8bit.
Optimizing cells in module \mux2X1.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~1 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\barrel_shifter_8bit' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23.2. Extracting gate netlist of module `\mux2X1' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 4 wires to a netlist network with 3 inputs and 1 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \barrel_shifter_8bit
Used module:     \mux2X1

3.25.2. Analyzing design hierarchy..
Top module:  \barrel_shifter_8bit
Used module:     \mux2X1
Removed 0 unused modules.

3.26. Printing statistics.

=== barrel_shifter_8bit ===

Number of wires:                  5
Number of wire bits:             35
Number of public wires:           5
Number of public wire bits:      35
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 24
mux2X1                         24

=== mux2X1 ===

Number of wires:                  4
Number of wire bits:              4
Number of public wires:           4
Number of public wire bits:       4
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                  1
$_MUX_                          1

=== design hierarchy ===

barrel_shifter_8bit               1
mux2X1                         24

Number of wires:                101
Number of wire bits:            131
Number of public wires:         101
Number of public wire bits:     131
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 24
$_MUX_                         24

3.27. Executing CHECK pass (checking for obvious problems).
checking module barrel_shifter_8bit..
checking module mux2X1..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\barrel_shifter_8bit':
Mapping DFF cells in module `\mux2X1':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \barrel_shifter_8bit..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mux2X1..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \barrel_shifter_8bit.
Optimizing cells in module \mux2X1.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Finding identical cells in module `\mux2X1'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Finding unused cells or wires in module \mux2X1..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.
Optimizing module mux2X1.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\barrel_shifter_8bit' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.2. Extracting gate netlist of module `\mux2X1' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 4 wires to a netlist network with 3 inputs and 1 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.2.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Using template mux2X1 for cells of type mux2X1.
<suppressed ~24 debug messages>
No more expansions possible.
Deleting now unused module mux2X1.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 170 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port barrel_shifter_8bit.ctrl: Missing option -inpad.
Don't map input port barrel_shifter_8bit.in: Missing option -inpad.
Mapping port barrel_shifter_8bit.out using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \barrel_shifter_8bit..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \barrel_shifter_8bit.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\barrel_shifter_8bit'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \barrel_shifter_8bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module barrel_shifter_8bit.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== barrel_shifter_8bit ===

Number of wires:                 75
Number of wire bits:             91
Number of public wires:          75
Number of public wire bits:      91
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 80
BUFX2                           8
INVX1                          24
NAND2X1                        24
OAI21X1                        24

End of script. Logfile hash: 20e565333a
CPU: user 0.27s system 0.03s, MEM: 16.49 MB total, 11.10 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 22% 1x share (0 sec), 12% 4x read_verilog (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl barrel_shifter_8bit_mapped.blif barrel_shifter_8bit /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd
Yosys syntax postprocessing
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I barrel_shifter_8bit_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif barrel_shifter_8bit.blif
gates resized: 0
Generating RTL verilog and SPICE netlist file in directory
/home/jayanth/Desktop/vsdflow/barrel/synthesis
Files:
Verilog: /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.rtl.v
Verilog: /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.rtlnopwr.v
Verilog: /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.rtlbb.v
Spice:   /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.spc
Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" barrel_shifter_8bit.spc barrel_shifter_8bit.xspice

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 12 warnings total.
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/jayanth/Desktop/vsdflow/barrel/layout/barrel_shifter_8bit.cel
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
No barrel_shifter_8bit.cel1 file found for project. . . no partial blockages to apply to layout.
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
No barrel_shifter_8bit.cel2 file found for project. . . continuing without pin placement hints
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
Running GrayWolf placement
graywolf  barrel_shifter_8bit
Running getfillcell to determine cell to use for fill.
getfillcell.tcl barrel_shifter_8bit  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl barrel_shifter_8bit FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG barrel_shifter_8bit  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  barrel_shifter_8bit
Reading info file barrel_shifter_8bit.info. . .
Reading DEF file barrel_shifter_8bit.def. . .

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Running qrouter 1.4.59.T
qrouter -noc  -s barrel_shifter_8bit.cfg
*** Running stage1 routing with defaults
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 60
Nets remaining: 50
Nets remaining: 40
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Nets remaining: 1
Progress: Stage 1 total routes completed: 160
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 40
Nets remaining: 10
Nets remaining: 9
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Progress: Stage 3 total routes completed: 276
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 40
Nets remaining: 10
Nets remaining: 9
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Progress: Stage 3 total routes completed: 391
No failed routes!
*** Writing DEF file barrel_shifter_8bit_route.def
Final: No failed routes!
*** Writing RC file barrel_shifter_8bit_route.rc
Running annotate.tcl antenna.out /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.rtlnopwr.v
/home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.spc /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.rtlnopwr.anno.v
/home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.anno.spc  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Converting qrouter output to vesta delay format
Running rc2dly -r barrel_shifter_8bit.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d barrel_shifter_8bit.dly
Reading Liberty timing file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Number of Rs: 363
TBD: need to clean-up node deletion
Converting qrouter output to SPEF delay format
Running rc2dly -D : -r barrel_shifter_8bit.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d barrel_shifter_8bit.spef
Reading Liberty timing file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Number of Rs: 363
TBD: need to clean-up node deletion
Converting qrouter output to SDF delay format
Running rc2dly -r barrel_shifter_8bit.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d barrel_shifter_8bit.sdf

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Running magic 8.3.50
magic -dnull -noconsole  migrate_barrel_shifter_8bit.tcl

Magic 8.3 revision 50 - Compiled on Monday 23 May 2022 06:19:57 PM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_barrel_shifter_8bit.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Reading DEF data from file barrel_shifter_8bit.def.
This action cannot be undone.
Processed 3 vias total.
Processed 104 subcell instances total.
Processed 21 pins total.
Processed 92 nets total.
DEF read, Line 1032 (Warning): Number of nets read (10) does not match the number declared (11).
DEF read: Processed 1033 lines.
DEF Read: encountered 1 warning total.
Generating LEF output barrel_shifter_8bit.lef for cell barrel_shifter_8bit:
Diagnostic:  Write LEF header for cell barrel_shifter_8bit
Diagnostic:  Writing LEF output for cell barrel_shifter_8bit
Diagnostic:  Scale value is 0.050000
Extracting FILL into FILL.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting barrel_shifter_8bit into barrel_shifter_8bit.ext:
Completed 7%
Completed 13%
Completed 20%
Completed 27%
Completed 33%
Completed 40%
Completed 47%

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Running magic 8.3.50
magic -dnull -noconsole  /home/jayanth/Desktop/vsdflow/barrel/layout/run_drc_barrel_shifter_8bit.tcl

Magic 8.3 revision 50 - Compiled on Monday 23 May 2022 06:19:57 PM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Running netgen
netgen ${lvs_options} -batch lvs "${rootname}.spice ${rootname}"
"${synthdir}/${rootname}.spc ${rootname}" ${setup_script} ${outfile}
-json -blackbox
Netgen 1.5.134 compiled on Monday 23 May 2022 06:20:23 PM IST
Warning: netgen command 'global' use fully-qualified name '::netgen::global'
Generating JSON file result
Treating empty subcircuits as black-box cells
Reading netlist file barrel_shifter_8bit.spice
Reading netlist file /home/jayanth/Desktop/vsdflow/barrel/synthesis/barrel_shifter_8bit.spc

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project barrel_shifter_8bit
Running magic 8.3.50
magic -dnull -noconsole  /home/jayanth/Desktop/vsdflow/barrel/layout/generate_gds_barrel_shifter_8bit.tcl

Magic 8.3 revision 50 - Compiled on Monday 23 May 2022 06:19:57 PM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/jayanth/Desktop/vsdflow/barrel/layout/generate_gds_barrel_shifter_8bit.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
Moving label "vdd" from space to metal1 in cell BUFX2.
Moving label "gnd" from space to metal1 in cell BUFX2.
Moving label "A" from space to metal1 in cell BUFX2.
Moving label "Y" from space to metal1 in cell BUFX2.
Reading "BUFX4".
Moving label "vdd" from space to metal1 in cell BUFX4.
Moving label "gnd" from space to metal1 in cell BUFX4.
Moving label "A" from space to metal1 in cell BUFX4.
Moving label "Y" from space to metal1 in cell BUFX4.
Reading "DFFNEGX1".
Moving label "CLK" from space to metal1 in cell DFFNEGX1.
Moving label "vdd" from space to metal1 in cell DFFNEGX1.
Moving label "D" from space to metal1 in cell DFFNEGX1.
Moving label "gnd" from space to metal1 in cell DFFNEGX1.
Moving label "Q" from space to metal1 in cell DFFNEGX1.
Reading "NOR3X1".
Moving label "vdd" from space to metal1 in cell NOR3X1.
Moving label "gnd" from space to metal1 in cell NOR3X1.
Moving label "B" from space to metal1 in cell NOR3X1.
Moving label "C" from space to metal1 in cell NOR3X1.
Moving label "A" from space to metal1 in cell NOR3X1.
Moving label "Y" from space to metal1 in cell NOR3X1.
Reading "DFFPOSX1".
Moving label "vdd" from space to metal1 in cell DFFPOSX1.
Moving label "D" from space to metal1 in cell DFFPOSX1.
Moving label "gnd" from space to metal1 in cell DFFPOSX1.
Moving label "Q" from space to metal1 in cell DFFPOSX1.
Moving label "CLK" from space to metal1 in cell DFFPOSX1.
Reading "FAX1".
Moving label "gnd" from space to metal1 in cell FAX1.
Moving label "vdd" from space to metal1 in cell FAX1.
Moving label "A" from space to metal1 in cell FAX1.
Moving label "B" from space to metal1 in cell FAX1.
Moving label "C" from space to metal1 in cell FAX1.
Moving label "YC" from space to metal1 in cell FAX1.
Moving label "YS" from space to metal1 in cell FAX1.
Reading "HAX1".
Moving label "vdd" from space to metal1 in cell HAX1.
Moving label "gnd" from space to metal1 in cell HAX1.
Moving label "YC" from space to metal1 in cell HAX1.
Moving label "A" from space to metal1 in cell HAX1.
Moving label "B" from space to metal1 in cell HAX1.
Moving label "YS" from space to metal1 in cell HAX1.
Reading "INVX1".
Moving label "A" from space to metal1 in cell INVX1.
Moving label "Y" from space to metal1 in cell INVX1.
Moving label "vdd" from space to metal1 in cell INVX1.
Moving label "gnd" from space to metal1 in cell INVX1.
Reading "INVX2".
Moving label "vdd" from space to metal1 in cell INVX2.
Moving label "gnd" from space to metal1 in cell INVX2.
Moving label "Y" from space to metal1 in cell INVX2.
Moving label "A" from space to metal1 in cell INVX2.
Reading "INVX4".
Moving label "vdd" from space to metal1 in cell INVX4.
Moving label "gnd" from space to metal1 in cell INVX4.
Moving label "Y" from space to metal1 in cell INVX4.
Moving label "A" from space to metal1 in cell INVX4.
Reading "INVX8".
Moving label "vdd" from space to metal1 in cell INVX8.
Moving label "gnd" from space to metal1 in cell INVX8.
Moving label "A" from space to metal1 in cell INVX8.
Moving label "Y" from space to metal1 in cell INVX8.
Reading "NAND2X1".
Moving label "vdd" from space to metal1 in cell NAND2X1.
Moving label "Y" from space to metal1 in cell NAND2X1.
Moving label "gnd" from space to metal1 in cell NAND2X1.
Moving label "A" from space to metal1 in cell NAND2X1.
Moving label "B" from space to metal1 in cell NAND2X1.
Reading "NAND3X1".
Moving label "B" from space to metal1 in cell NAND3X1.
Moving label "vdd" from space to metal1 in cell NAND3X1.
Moving label "gnd" from space to metal1 in cell NAND3X1.
Moving label "A" from space to metal1 in cell NAND3X1.
Moving label "C" from space to metal1 in cell NAND3X1.
Moving label "Y" from space to metal1 in cell NAND3X1.
Reading "NOR2X1".
Moving label "vdd" from space to metal1 in cell NOR2X1.
Moving label "B" from space to metal1 in cell NOR2X1.
Moving label "gnd" from space to metal1 in cell NOR2X1.
Moving label "Y" from space to metal1 in cell NOR2X1.
Moving label "A" from space to metal1 in cell NOR2X1.
Reading "OAI21X1".
Moving label "gnd" from space to metal1 in cell OAI21X1.
Moving label "vdd" from space to metal1 in cell OAI21X1.
Moving label "A" from space to metal1 in cell OAI21X1.
Moving label "B" from space to metal1 in cell OAI21X1.
Moving label "Y" from space to metal1 in cell OAI21X1.
Moving label "C" from space to metal1 in cell OAI21X1.
Reading "OAI22X1".
Moving label "gnd" from space to metal1 in cell OAI22X1.
Moving label "vdd" from space to metal1 in cell OAI22X1.
Moving label "D" from space to metal1 in cell OAI22X1.
Moving label "C" from space to metal1 in cell OAI22X1.
Moving label "A" from space to metal1 in cell OAI22X1.
Moving label "B" from space to metal1 in cell OAI22X1.
Moving label "Y" from space to metal1 in cell OAI22X1.
Reading "OR2X1".
Moving label "Y" from space to metal1 in cell OR2X1.
Moving label "B" from space to metal1 in cell OR2X1.
Moving label "vdd" from space to metal1 in cell OR2X1.
Moving label "gnd" from space to metal1 in cell OR2X1.
Moving label "A" from space to metal1 in cell OR2X1.
Reading "OR2X2".
Moving label "Y" from space to metal1 in cell OR2X2.
Moving label "B" from space to metal1 in cell OR2X2.
Moving label "vdd" from space to metal1 in cell OR2X2.
Moving label "gnd" from space to metal1 in cell OR2X2.
Moving label "A" from space to metal1 in cell OR2X2.
Reading "TBUFX1".
Moving label "vdd" from space to metal1 in cell TBUFX1.
Moving label "gnd" from space to metal1 in cell TBUFX1.
Moving label "EN" from space to metal1 in cell TBUFX1.
Moving label "A" from space to metal1 in cell TBUFX1.
Moving label "Y" from space to metal1 in cell TBUFX1.
Reading "TBUFX2".
Moving label "vdd" from space to metal1 in cell TBUFX2.
Moving label "gnd" from space to metal1 in cell TBUFX2.
Moving label "A" from space to metal1 in cell TBUFX2.
Moving label "EN" from space to metal1 in cell TBUFX2.
Moving label "Y" from space to metal1 in cell TBUFX2.
Reading "XOR2X1".
Moving label "Y" from space to metal1 in cell XOR2X1.
Moving label "vdd" from space to metal1 in cell XOR2X1.
Moving label "B" from space to metal1 in cell XOR2X1.
Moving label "A" from space to metal1 in cell XOR2X1.
Moving label "gnd" from space to metal1 in cell XOR2X1.
Reading "MUX2X1".
Moving label "S" from space to metal1 in cell MUX2X1.
Moving label "vdd" from space to metal1 in cell MUX2X1.
Moving label "gnd" from space to metal1 in cell MUX2X1.
Moving label "Y" from space to metal1 in cell MUX2X1.
Moving label "A" from space to metal1 in cell MUX2X1.
Moving label "B" from space to metal1 in cell MUX2X1.
Reading "XNOR2X1".
Moving label "A" from space to metal1 in cell XNOR2X1.
Moving label "B" from space to metal1 in cell XNOR2X1.
Moving label "gnd" from space to metal1 in cell XNOR2X1.
Moving label "vdd" from space to metal1 in cell XNOR2X1.
Moving label "Y" from space to metal1 in cell XNOR2X1.
Reading "LATCH".
Moving label "D" from space to metal1 in cell LATCH.
Moving label "Q" from space to metal1 in cell LATCH.
Moving label "gnd" from space to metal1 in cell LATCH.
Moving label "vdd" from space to metal1 in cell LATCH.
Moving label "CLK" from space to metal1 in cell LATCH.
Reading "DFFSR".
Moving label "gnd" from space to metal1 in cell DFFSR.
Moving label "vdd" from space to metal1 in cell DFFSR.
Moving label "D" from space to metal1 in cell DFFSR.
Moving label "S" from space to metal1 in cell DFFSR.
Moving label "R" from space to metal1 in cell DFFSR.
Moving label "Q" from space to metal1 in cell DFFSR.
